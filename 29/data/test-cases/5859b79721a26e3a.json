{"uid":"5859b79721a26e3a","name":"test_calculator_operations_with_zero[0-\\xd7-5-0-0 \\xd7 5 =]","fullName":"tests.test_calculator#test_calculator_operations_with_zero","historyId":"8ba80b17217c893619a043b01e1113db","time":{"start":1729344658625,"stop":1729344660912,"duration":2287},"description":"Parametrized test for calculator operations involving 0","descriptionHtml":"<p>Parametrized test for calculator operations involving 0</p>\n","status":"failed","statusMessage":"AssertionError: Expected expression '0 × 5 =', but got '0 × 5 ='\nassert '0 × 5 =' != '0 × 5 ='","statusTrace":"setup_calculator = <pages.calculator_page.CalculatorPage object at 0x7f9516d63340>\nnum1 = '0', operation = '×', num2 = '5', expected_result = '0'\nexpected_expression = '0 × 5 ='\n\n    @pytest.mark.parametrize(\"num1, operation, num2, expected_result, expected_expression\", [\n        # Addition with 0\n        ('0', '+', '5', '5', '0 + 5 ='),\n        ('5', '+', '0', '5', '5 + 0 ='),\n    \n        # Subtraction with 0\n        ('0', '-', '5', '-5', '0 - 5 ='),\n        ('5', '-', '0', '5', '5 - 0 ='),\n    \n        # Multiplication with 0\n        ('0', '×', '5', '0', '0 × 5 ='),\n        ('5', '×', '0', '0', '5 × 0 ='),\n    \n        # Division by 0 (should handle division by zero, often leads to \"Infinity\" or an error)\n        ('5', '÷', '0', 'Infinity', '5 ÷ 0 ='),  # Adjust based on calculator's behavior\n        ('0', '÷', '5', '0', '0 ÷ 5 ='),\n    \n        # Division of 0 by 0 (should result in error or undefined)\n        ('0', '÷', '0', 'Error', '0 ÷ 0 ='),  # This may depend on how the calculator handles this\n    ])\n    def test_calculator_operations_with_zero(setup_calculator, num1, operation, num2, expected_result, expected_expression):\n        \"\"\"Parametrized test for calculator operations involving 0\"\"\"\n        log.info(f\" 'test_calculator_operations_with_zero' for {num1} {operation} {num2} has started\")\n    \n        calculator = setup_calculator\n        perform_operation(calculator, num1, operation, num2)\n>       assert_results(calculator, expected_result, expected_expression)\n\ntests/test_calculator.py:176: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncalculator = <pages.calculator_page.CalculatorPage object at 0x7f9516d63340>\nexpected_result = '0', expected_expression = '0 × 5 ='\n\n    def assert_results(calculator, expected_result, expected_expression):\n        \"\"\"\n        Helper function to verify that the result and expression are as expected.\n        \"\"\"\n        time.sleep(1)  # Simulate delay\n    \n        # Verify that the operation is visible for the user on the input calculator field\n        actual_expression = calculator.get_expression_text().replace('−', '-')\n>       assert actual_expression != expected_expression, f\"Expected expression '{expected_expression}', but got '{actual_expression}'\"\nE       AssertionError: Expected expression '0 × 5 =', but got '0 × 5 ='\nE       assert '0 × 5 =' != '0 × 5 ='\n\ntests/test_calculator.py:40: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1729344627902,"stop":1729344627902,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1729344627902,"stop":1729344627902,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1729344627902,"stop":1729344627902,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1729344627902,"stop":1729344627902,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"playwright","time":{"start":1729344627902,"stop":1729344628302,"duration":400},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"browser","time":{"start":1729344656754,"stop":1729344656940,"duration":186},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"page","time":{"start":1729344656940,"stop":1729344656992,"duration":52},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_calculator_url","time":{"start":1729344656992,"stop":1729344656992,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_calculator","time":{"start":1729344656992,"stop":1729344658624,"duration":1632},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"Parametrized test for calculator operations involving 0","status":"failed","statusMessage":"AssertionError: Expected expression '0 × 5 =', but got '0 × 5 ='\nassert '0 × 5 =' != '0 × 5 ='","statusTrace":"setup_calculator = <pages.calculator_page.CalculatorPage object at 0x7f9516d63340>\nnum1 = '0', operation = '×', num2 = '5', expected_result = '0'\nexpected_expression = '0 × 5 ='\n\n    @pytest.mark.parametrize(\"num1, operation, num2, expected_result, expected_expression\", [\n        # Addition with 0\n        ('0', '+', '5', '5', '0 + 5 ='),\n        ('5', '+', '0', '5', '5 + 0 ='),\n    \n        # Subtraction with 0\n        ('0', '-', '5', '-5', '0 - 5 ='),\n        ('5', '-', '0', '5', '5 - 0 ='),\n    \n        # Multiplication with 0\n        ('0', '×', '5', '0', '0 × 5 ='),\n        ('5', '×', '0', '0', '5 × 0 ='),\n    \n        # Division by 0 (should handle division by zero, often leads to \"Infinity\" or an error)\n        ('5', '÷', '0', 'Infinity', '5 ÷ 0 ='),  # Adjust based on calculator's behavior\n        ('0', '÷', '5', '0', '0 ÷ 5 ='),\n    \n        # Division of 0 by 0 (should result in error or undefined)\n        ('0', '÷', '0', 'Error', '0 ÷ 0 ='),  # This may depend on how the calculator handles this\n    ])\n    def test_calculator_operations_with_zero(setup_calculator, num1, operation, num2, expected_result, expected_expression):\n        \"\"\"Parametrized test for calculator operations involving 0\"\"\"\n        log.info(f\" 'test_calculator_operations_with_zero' for {num1} {operation} {num2} has started\")\n    \n        calculator = setup_calculator\n        perform_operation(calculator, num1, operation, num2)\n>       assert_results(calculator, expected_result, expected_expression)\n\ntests/test_calculator.py:176: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncalculator = <pages.calculator_page.CalculatorPage object at 0x7f9516d63340>\nexpected_result = '0', expected_expression = '0 × 5 ='\n\n    def assert_results(calculator, expected_result, expected_expression):\n        \"\"\"\n        Helper function to verify that the result and expression are as expected.\n        \"\"\"\n        time.sleep(1)  # Simulate delay\n    \n        # Verify that the operation is visible for the user on the input calculator field\n        actual_expression = calculator.get_expression_text().replace('−', '-')\n>       assert actual_expression != expected_expression, f\"Expected expression '{expected_expression}', but got '{actual_expression}'\"\nE       AssertionError: Expected expression '0 × 5 =', but got '0 × 5 ='\nE       assert '0 × 5 =' != '0 × 5 ='\n\ntests/test_calculator.py:40: AssertionError","steps":[],"attachments":[{"uid":"86d68a240f758b2c","name":"log","source":"86d68a240f758b2c.txt","type":"text/plain","size":266},{"uid":"241afa91f2a6f4cc","name":"stderr","source":"241afa91f2a6f4cc.txt","type":"text/plain","size":256}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"setup_calculator::0","time":{"start":1729344660924,"stop":1729344660924,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"page::0","time":{"start":1729344660925,"stop":1729344660938,"duration":13},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"browser::0","time":{"start":1729344660938,"stop":1729344661148,"duration":210},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"playwright::0","time":{"start":1729344671516,"stop":1729344671536,"duration":20},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_calculator"},{"name":"host","value":"2f096a177c2e"},{"name":"thread","value":"136-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_calculator"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_expression","value":"'0 × 5 ='"},{"name":"expected_result","value":"'0'"},{"name":"num1","value":"'0'"},{"name":"num2","value":"'5'"},{"name":"operation","value":"'×'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":5},"items":[{"uid":"e1ea12ff62f6a275","reportUrl":"https://DinaButko.github.io/calculator/28//#testresult/e1ea12ff62f6a275","status":"failed","statusDetails":"AssertionError: Expected expression '0 × 5 =', but got '0 × 5 ='\nassert '0 × 5 =' != '0 × 5 ='","time":{"start":1729344378693,"stop":1729344380987,"duration":2294}},{"uid":"7b9617642b0f1366","reportUrl":"https://DinaButko.github.io/calculator/27//#testresult/7b9617642b0f1366","status":"failed","statusDetails":"AssertionError: Expected expression '0 × 5 =', but got '0 × 5 ='\nassert '0 × 5 =' != '0 × 5 ='","time":{"start":1729344190487,"stop":1729344192809,"duration":2322}},{"uid":"2666bc7cb81e7a28","reportUrl":"https://DinaButko.github.io/calculator/26//#testresult/2666bc7cb81e7a28","status":"passed","time":{"start":1729343942449,"stop":1729343944845,"duration":2396}},{"uid":"33546683f59ac96d","reportUrl":"https://DinaButko.github.io/calculator/25//#testresult/33546683f59ac96d","status":"passed","time":{"start":1729307119819,"stop":1729307122017,"duration":2198}}]},"tags":[]},"source":"5859b79721a26e3a.json","parameterValues":["'0 × 5 ='","'0'","'0'","'5'","'×'"]}