{"uid":"9e2933fbb6f19548","name":"test_calculator_large_number_operations[1000000000-+-2000000000-3000000000-1000000000 + 2000000000 =]","fullName":"tests.test_calculator#test_calculator_large_number_operations","historyId":"d14ed37b36d65db7b6c05544d070362d","time":{"start":1729344647284,"stop":1729344652238,"duration":4954},"description":"Parametrized test for calculator operations involving large numbers","descriptionHtml":"<p>Parametrized test for calculator operations involving large numbers</p>\n","status":"failed","statusMessage":"AssertionError: Expected expression '1000000000 + 2000000000 =', but got '1000000000 + 2000000000 ='\nassert '1000000000 + 2000000000 =' != '1000000000 + 2000000000 ='","statusTrace":"setup_calculator = <pages.calculator_page.CalculatorPage object at 0x7f9516d62830>\nnum1 = '1000000000', operation = '+', num2 = '2000000000'\nexpected_result = '3000000000'\nexpected_expression = '1000000000 + 2000000000 ='\n\n    @pytest.mark.parametrize(\"num1, operation, num2, expected_result, expected_expression\", [\n        # Large numbers cases\n        ('1000000000', '+', '2000000000', '3000000000', '1000000000 + 2000000000 ='),\n        ('999999999999', '-', '1', '999999999998', '999999999999 - 1 ='),\n        ('5000000000', '×', '2000000000', '1e+19', '5000000000 × 2000000000 ='),\n        ('1000000000000', '÷', '1000000', '1000000', '1000000000000 ÷ 1000000 ='),\n    ])\n    def test_calculator_large_number_operations(setup_calculator, num1, operation, num2, expected_result,\n                                                expected_expression):\n        \"\"\"Parametrized test for calculator operations involving large numbers\"\"\"\n        log.info(f\" 'test_calculator_large_number_operations' for {num1} {operation} {num2} has started\")\n    \n        calculator = setup_calculator\n        perform_operation(calculator, num1, operation, num2)\n>       assert_results(calculator, expected_result, expected_expression)\n\ntests/test_calculator.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncalculator = <pages.calculator_page.CalculatorPage object at 0x7f9516d62830>\nexpected_result = '3000000000'\nexpected_expression = '1000000000 + 2000000000 ='\n\n    def assert_results(calculator, expected_result, expected_expression):\n        \"\"\"\n        Helper function to verify that the result and expression are as expected.\n        \"\"\"\n        time.sleep(1)  # Simulate delay\n    \n        # Verify that the operation is visible for the user on the input calculator field\n        actual_expression = calculator.get_expression_text().replace('−', '-')\n>       assert actual_expression != expected_expression, f\"Expected expression '{expected_expression}', but got '{actual_expression}'\"\nE       AssertionError: Expected expression '1000000000 + 2000000000 =', but got '1000000000 + 2000000000 ='\nE       assert '1000000000 + 2000000000 =' != '1000000000 + 2000000000 ='\n\ntests/test_calculator.py:40: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1729344627902,"stop":1729344627902,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1729344627902,"stop":1729344627902,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1729344627902,"stop":1729344627902,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1729344627902,"stop":1729344627902,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"playwright","time":{"start":1729344627902,"stop":1729344628302,"duration":400},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"browser","time":{"start":1729344644734,"stop":1729344644950,"duration":216},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"page","time":{"start":1729344644950,"stop":1729344645078,"duration":128},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_calculator_url","time":{"start":1729344645078,"stop":1729344645078,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_calculator","time":{"start":1729344645078,"stop":1729344647282,"duration":2204},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"Parametrized test for calculator operations involving large numbers","status":"failed","statusMessage":"AssertionError: Expected expression '1000000000 + 2000000000 =', but got '1000000000 + 2000000000 ='\nassert '1000000000 + 2000000000 =' != '1000000000 + 2000000000 ='","statusTrace":"setup_calculator = <pages.calculator_page.CalculatorPage object at 0x7f9516d62830>\nnum1 = '1000000000', operation = '+', num2 = '2000000000'\nexpected_result = '3000000000'\nexpected_expression = '1000000000 + 2000000000 ='\n\n    @pytest.mark.parametrize(\"num1, operation, num2, expected_result, expected_expression\", [\n        # Large numbers cases\n        ('1000000000', '+', '2000000000', '3000000000', '1000000000 + 2000000000 ='),\n        ('999999999999', '-', '1', '999999999998', '999999999999 - 1 ='),\n        ('5000000000', '×', '2000000000', '1e+19', '5000000000 × 2000000000 ='),\n        ('1000000000000', '÷', '1000000', '1000000', '1000000000000 ÷ 1000000 ='),\n    ])\n    def test_calculator_large_number_operations(setup_calculator, num1, operation, num2, expected_result,\n                                                expected_expression):\n        \"\"\"Parametrized test for calculator operations involving large numbers\"\"\"\n        log.info(f\" 'test_calculator_large_number_operations' for {num1} {operation} {num2} has started\")\n    \n        calculator = setup_calculator\n        perform_operation(calculator, num1, operation, num2)\n>       assert_results(calculator, expected_result, expected_expression)\n\ntests/test_calculator.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncalculator = <pages.calculator_page.CalculatorPage object at 0x7f9516d62830>\nexpected_result = '3000000000'\nexpected_expression = '1000000000 + 2000000000 ='\n\n    def assert_results(calculator, expected_result, expected_expression):\n        \"\"\"\n        Helper function to verify that the result and expression are as expected.\n        \"\"\"\n        time.sleep(1)  # Simulate delay\n    \n        # Verify that the operation is visible for the user on the input calculator field\n        actual_expression = calculator.get_expression_text().replace('−', '-')\n>       assert actual_expression != expected_expression, f\"Expected expression '{expected_expression}', but got '{actual_expression}'\"\nE       AssertionError: Expected expression '1000000000 + 2000000000 =', but got '1000000000 + 2000000000 ='\nE       assert '1000000000 + 2000000000 =' != '1000000000 + 2000000000 ='\n\ntests/test_calculator.py:40: AssertionError","steps":[],"attachments":[{"uid":"380e2e871d060ee5","name":"log","source":"380e2e871d060ee5.txt","type":"text/plain","size":286},{"uid":"14d6d324a7b76cd8","name":"stderr","source":"14d6d324a7b76cd8.txt","type":"text/plain","size":276}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"setup_calculator::0","time":{"start":1729344652254,"stop":1729344652255,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"page::0","time":{"start":1729344652255,"stop":1729344652287,"duration":32},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"browser::0","time":{"start":1729344652288,"stop":1729344652564,"duration":276},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"playwright::0","time":{"start":1729344671516,"stop":1729344671536,"duration":20},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_calculator"},{"name":"host","value":"2f096a177c2e"},{"name":"thread","value":"136-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_calculator"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_expression","value":"'1000000000 + 2000000000 ='"},{"name":"expected_result","value":"'3000000000'"},{"name":"num1","value":"'1000000000'"},{"name":"num2","value":"'2000000000'"},{"name":"operation","value":"'+'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":5},"items":[{"uid":"2147d902b6b87235","reportUrl":"https://DinaButko.github.io/calculator/28//#testresult/2147d902b6b87235","status":"failed","statusDetails":"AssertionError: Expected expression '1000000000 + 2000000000 =', but got '1000000000 + 2000000000 ='\nassert '1000000000 + 2000000000 =' != '1000000000 + 2000000000 ='","time":{"start":1729344365578,"stop":1729344371961,"duration":6383}},{"uid":"3336a4f13cf294a1","reportUrl":"https://DinaButko.github.io/calculator/27//#testresult/3336a4f13cf294a1","status":"failed","statusDetails":"AssertionError: Expected expression '1000000000 + 2000000000 =', but got '1000000000 + 2000000000 ='\nassert '1000000000 + 2000000000 =' != '1000000000 + 2000000000 ='","time":{"start":1729344176539,"stop":1729344181202,"duration":4663}},{"uid":"a5a38ff638f8cc40","reportUrl":"https://DinaButko.github.io/calculator/26//#testresult/a5a38ff638f8cc40","status":"passed","time":{"start":1729343928470,"stop":1729343934385,"duration":5915}},{"uid":"65a79540147dc261","reportUrl":"https://DinaButko.github.io/calculator/25//#testresult/65a79540147dc261","status":"passed","time":{"start":1729307103398,"stop":1729307110054,"duration":6656}}]},"tags":[]},"source":"9e2933fbb6f19548.json","parameterValues":["'1000000000 + 2000000000 ='","'3000000000'","'1000000000'","'2000000000'","'+'"]}