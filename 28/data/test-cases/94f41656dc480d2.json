{"uid":"94f41656dc480d2","name":"test_calculator_operations_with_zero[5-\\xf7-0-Infinity-5 \\xf7 0 =]","fullName":"tests.test_calculator#test_calculator_operations_with_zero","historyId":"f3eb9ebaf9f1da6c3eff4fcd8e2778b9","time":{"start":1729344381780,"stop":1729344384408,"duration":2628},"description":"Parametrized test for calculator operations involving 0","descriptionHtml":"<p>Parametrized test for calculator operations involving 0</p>\n","status":"failed","statusMessage":"AssertionError: Expected expression '5 ÷ 0 =', but got '5 ÷ 0 ='\nassert '5 ÷ 0 =' != '5 ÷ 0 ='","statusTrace":"setup_calculator = <pages.calculator_page.CalculatorPage object at 0x7f021c4ddd20>\nnum1 = '5', operation = '÷', num2 = '0', expected_result = 'Infinity'\nexpected_expression = '5 ÷ 0 ='\n\n    @pytest.mark.parametrize(\"num1, operation, num2, expected_result, expected_expression\", [\n        # Addition with 0\n        ('0', '+', '5', '5', '0 + 5 ='),\n        ('5', '+', '0', '5', '5 + 0 ='),\n    \n        # Subtraction with 0\n        ('0', '-', '5', '-5', '0 - 5 ='),\n        ('5', '-', '0', '5', '5 - 0 ='),\n    \n        # Multiplication with 0\n        ('0', '×', '5', '0', '0 × 5 ='),\n        ('5', '×', '0', '0', '5 × 0 ='),\n    \n        # Division by 0 (should handle division by zero, often leads to \"Infinity\" or an error)\n        ('5', '÷', '0', 'Infinity', '5 ÷ 0 ='),  # Adjust based on calculator's behavior\n        ('0', '÷', '5', '0', '0 ÷ 5 ='),\n    \n        # Division of 0 by 0 (should result in error or undefined)\n        ('0', '÷', '0', 'Error', '0 ÷ 0 ='),  # This may depend on how the calculator handles this\n    ])\n    def test_calculator_operations_with_zero(setup_calculator, num1, operation, num2, expected_result, expected_expression):\n        \"\"\"Parametrized test for calculator operations involving 0\"\"\"\n        log.info(f\" 'test_calculator_operations_with_zero' for {num1} {operation} {num2} has started\")\n    \n        calculator = setup_calculator\n        perform_operation(calculator, num1, operation, num2)\n>       assert_results(calculator, expected_result, expected_expression)\n\ntests/test_calculator.py:176: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncalculator = <pages.calculator_page.CalculatorPage object at 0x7f021c4ddd20>\nexpected_result = 'Infinity', expected_expression = '5 ÷ 0 ='\n\n    def assert_results(calculator, expected_result, expected_expression):\n        \"\"\"\n        Helper function to verify that the result and expression are as expected.\n        \"\"\"\n        time.sleep(1)  # Simulate delay\n    \n        # Verify that the operation is visible for the user on the input calculator field\n        actual_expression = calculator.get_expression_text().replace('−', '-')\n>       assert actual_expression != expected_expression, f\"Expected expression '{expected_expression}', but got '{actual_expression}'\"\nE       AssertionError: Expected expression '5 ÷ 0 =', but got '5 ÷ 0 ='\nE       assert '5 ÷ 0 =' != '5 ÷ 0 ='\n\ntests/test_calculator.py:40: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1729344343655,"stop":1729344343655,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1729344343655,"stop":1729344343655,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1729344343655,"stop":1729344343655,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1729344343655,"stop":1729344343655,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"playwright","time":{"start":1729344343656,"stop":1729344344054,"duration":398},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"browser","time":{"start":1729344380366,"stop":1729344380576,"duration":210},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"page","time":{"start":1729344380577,"stop":1729344380660,"duration":83},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_calculator_url","time":{"start":1729344380660,"stop":1729344380661,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_calculator","time":{"start":1729344380661,"stop":1729344381778,"duration":1117},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"Parametrized test for calculator operations involving 0","status":"failed","statusMessage":"AssertionError: Expected expression '5 ÷ 0 =', but got '5 ÷ 0 ='\nassert '5 ÷ 0 =' != '5 ÷ 0 ='","statusTrace":"setup_calculator = <pages.calculator_page.CalculatorPage object at 0x7f021c4ddd20>\nnum1 = '5', operation = '÷', num2 = '0', expected_result = 'Infinity'\nexpected_expression = '5 ÷ 0 ='\n\n    @pytest.mark.parametrize(\"num1, operation, num2, expected_result, expected_expression\", [\n        # Addition with 0\n        ('0', '+', '5', '5', '0 + 5 ='),\n        ('5', '+', '0', '5', '5 + 0 ='),\n    \n        # Subtraction with 0\n        ('0', '-', '5', '-5', '0 - 5 ='),\n        ('5', '-', '0', '5', '5 - 0 ='),\n    \n        # Multiplication with 0\n        ('0', '×', '5', '0', '0 × 5 ='),\n        ('5', '×', '0', '0', '5 × 0 ='),\n    \n        # Division by 0 (should handle division by zero, often leads to \"Infinity\" or an error)\n        ('5', '÷', '0', 'Infinity', '5 ÷ 0 ='),  # Adjust based on calculator's behavior\n        ('0', '÷', '5', '0', '0 ÷ 5 ='),\n    \n        # Division of 0 by 0 (should result in error or undefined)\n        ('0', '÷', '0', 'Error', '0 ÷ 0 ='),  # This may depend on how the calculator handles this\n    ])\n    def test_calculator_operations_with_zero(setup_calculator, num1, operation, num2, expected_result, expected_expression):\n        \"\"\"Parametrized test for calculator operations involving 0\"\"\"\n        log.info(f\" 'test_calculator_operations_with_zero' for {num1} {operation} {num2} has started\")\n    \n        calculator = setup_calculator\n        perform_operation(calculator, num1, operation, num2)\n>       assert_results(calculator, expected_result, expected_expression)\n\ntests/test_calculator.py:176: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncalculator = <pages.calculator_page.CalculatorPage object at 0x7f021c4ddd20>\nexpected_result = 'Infinity', expected_expression = '5 ÷ 0 ='\n\n    def assert_results(calculator, expected_result, expected_expression):\n        \"\"\"\n        Helper function to verify that the result and expression are as expected.\n        \"\"\"\n        time.sleep(1)  # Simulate delay\n    \n        # Verify that the operation is visible for the user on the input calculator field\n        actual_expression = calculator.get_expression_text().replace('−', '-')\n>       assert actual_expression != expected_expression, f\"Expected expression '{expected_expression}', but got '{actual_expression}'\"\nE       AssertionError: Expected expression '5 ÷ 0 =', but got '5 ÷ 0 ='\nE       assert '5 ÷ 0 =' != '5 ÷ 0 ='\n\ntests/test_calculator.py:40: AssertionError","steps":[],"attachments":[{"uid":"770b5a913ea8104b","name":"log","source":"770b5a913ea8104b.txt","type":"text/plain","size":266},{"uid":"e806e920476724f7","name":"stderr","source":"e806e920476724f7.txt","type":"text/plain","size":256}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"setup_calculator::0","time":{"start":1729344384429,"stop":1729344384429,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"page::0","time":{"start":1729344384430,"stop":1729344384460,"duration":30},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"browser::0","time":{"start":1729344384461,"stop":1729344384780,"duration":319},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"playwright::0","time":{"start":1729344392685,"stop":1729344392700,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_calculator"},{"name":"host","value":"7db66effc99e"},{"name":"thread","value":"133-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_calculator"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_expression","value":"'5 ÷ 0 ='"},{"name":"expected_result","value":"'Infinity'"},{"name":"num1","value":"'5'"},{"name":"num2","value":"'0'"},{"name":"operation","value":"'÷'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":4},"items":[{"uid":"772b1032315eb8c9","reportUrl":"https://DinaButko.github.io/calculator/27//#testresult/772b1032315eb8c9","status":"failed","statusDetails":"AssertionError: Expected expression '5 ÷ 0 =', but got '5 ÷ 0 ='\nassert '5 ÷ 0 =' != '5 ÷ 0 ='","time":{"start":1729344190656,"stop":1729344193023,"duration":2367}},{"uid":"a449166bc3156b2f","reportUrl":"https://DinaButko.github.io/calculator/26//#testresult/a449166bc3156b2f","status":"passed","time":{"start":1729343945015,"stop":1729343947071,"duration":2056}},{"uid":"470f703c557b8a2a","reportUrl":"https://DinaButko.github.io/calculator/25//#testresult/470f703c557b8a2a","status":"passed","time":{"start":1729307120827,"stop":1729307123021,"duration":2194}}]},"tags":[]},"source":"94f41656dc480d2.json","parameterValues":["'5 ÷ 0 ='","'Infinity'","'5'","'0'","'÷'"]}