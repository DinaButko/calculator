{"uid":"4169c839437e51cc","name":"test_calculator_operations_with_zero[0-+-5-5-0 + 5 =]","fullName":"tests.test_calculator#test_calculator_operations_with_zero","historyId":"dc1b34d6d484168a5f3e6f5493709dcc","time":{"start":1729344374270,"stop":1729344376454,"duration":2184},"description":"Parametrized test for calculator operations involving 0","descriptionHtml":"<p>Parametrized test for calculator operations involving 0</p>\n","status":"failed","statusMessage":"AssertionError: Expected expression '0 + 5 =', but got '0 + 5 ='\nassert '0 + 5 =' != '0 + 5 ='","statusTrace":"setup_calculator = <pages.calculator_page.CalculatorPage object at 0x7fec5caf6530>\nnum1 = '0', operation = '+', num2 = '5', expected_result = '5'\nexpected_expression = '0 + 5 ='\n\n    @pytest.mark.parametrize(\"num1, operation, num2, expected_result, expected_expression\", [\n        # Addition with 0\n        ('0', '+', '5', '5', '0 + 5 ='),\n        ('5', '+', '0', '5', '5 + 0 ='),\n    \n        # Subtraction with 0\n        ('0', '-', '5', '-5', '0 - 5 ='),\n        ('5', '-', '0', '5', '5 - 0 ='),\n    \n        # Multiplication with 0\n        ('0', '×', '5', '0', '0 × 5 ='),\n        ('5', '×', '0', '0', '5 × 0 ='),\n    \n        # Division by 0 (should handle division by zero, often leads to \"Infinity\" or an error)\n        ('5', '÷', '0', 'Infinity', '5 ÷ 0 ='),  # Adjust based on calculator's behavior\n        ('0', '÷', '5', '0', '0 ÷ 5 ='),\n    \n        # Division of 0 by 0 (should result in error or undefined)\n        ('0', '÷', '0', 'Error', '0 ÷ 0 ='),  # This may depend on how the calculator handles this\n    ])\n    def test_calculator_operations_with_zero(setup_calculator, num1, operation, num2, expected_result, expected_expression):\n        \"\"\"Parametrized test for calculator operations involving 0\"\"\"\n        log.info(f\" 'test_calculator_operations_with_zero' for {num1} {operation} {num2} has started\")\n    \n        calculator = setup_calculator\n        perform_operation(calculator, num1, operation, num2)\n>       assert_results(calculator, expected_result, expected_expression)\n\ntests/test_calculator.py:176: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncalculator = <pages.calculator_page.CalculatorPage object at 0x7fec5caf6530>\nexpected_result = '5', expected_expression = '0 + 5 ='\n\n    def assert_results(calculator, expected_result, expected_expression):\n        \"\"\"\n        Helper function to verify that the result and expression are as expected.\n        \"\"\"\n        time.sleep(1)  # Simulate delay\n    \n        # Verify that the operation is visible for the user on the input calculator field\n        actual_expression = calculator.get_expression_text().replace('−', '-')\n>       assert actual_expression != expected_expression, f\"Expected expression '{expected_expression}', but got '{actual_expression}'\"\nE       AssertionError: Expected expression '0 + 5 =', but got '0 + 5 ='\nE       assert '0 + 5 =' != '0 + 5 ='\n\ntests/test_calculator.py:40: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"delete_output_dir","time":{"start":1729344343655,"stop":1729344343655,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1729344343655,"stop":1729344343655,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1729344343655,"stop":1729344343655,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1729344343655,"stop":1729344343655,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"playwright","time":{"start":1729344343656,"stop":1729344344063,"duration":407},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"browser","time":{"start":1729344372366,"stop":1729344372591,"duration":225},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"page","time":{"start":1729344372592,"stop":1729344372672,"duration":80},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_calculator","time":{"start":1729344372672,"stop":1729344374268,"duration":1596},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_calculator_url","time":{"start":1729344372672,"stop":1729344372672,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"Parametrized test for calculator operations involving 0","status":"failed","statusMessage":"AssertionError: Expected expression '0 + 5 =', but got '0 + 5 ='\nassert '0 + 5 =' != '0 + 5 ='","statusTrace":"setup_calculator = <pages.calculator_page.CalculatorPage object at 0x7fec5caf6530>\nnum1 = '0', operation = '+', num2 = '5', expected_result = '5'\nexpected_expression = '0 + 5 ='\n\n    @pytest.mark.parametrize(\"num1, operation, num2, expected_result, expected_expression\", [\n        # Addition with 0\n        ('0', '+', '5', '5', '0 + 5 ='),\n        ('5', '+', '0', '5', '5 + 0 ='),\n    \n        # Subtraction with 0\n        ('0', '-', '5', '-5', '0 - 5 ='),\n        ('5', '-', '0', '5', '5 - 0 ='),\n    \n        # Multiplication with 0\n        ('0', '×', '5', '0', '0 × 5 ='),\n        ('5', '×', '0', '0', '5 × 0 ='),\n    \n        # Division by 0 (should handle division by zero, often leads to \"Infinity\" or an error)\n        ('5', '÷', '0', 'Infinity', '5 ÷ 0 ='),  # Adjust based on calculator's behavior\n        ('0', '÷', '5', '0', '0 ÷ 5 ='),\n    \n        # Division of 0 by 0 (should result in error or undefined)\n        ('0', '÷', '0', 'Error', '0 ÷ 0 ='),  # This may depend on how the calculator handles this\n    ])\n    def test_calculator_operations_with_zero(setup_calculator, num1, operation, num2, expected_result, expected_expression):\n        \"\"\"Parametrized test for calculator operations involving 0\"\"\"\n        log.info(f\" 'test_calculator_operations_with_zero' for {num1} {operation} {num2} has started\")\n    \n        calculator = setup_calculator\n        perform_operation(calculator, num1, operation, num2)\n>       assert_results(calculator, expected_result, expected_expression)\n\ntests/test_calculator.py:176: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncalculator = <pages.calculator_page.CalculatorPage object at 0x7fec5caf6530>\nexpected_result = '5', expected_expression = '0 + 5 ='\n\n    def assert_results(calculator, expected_result, expected_expression):\n        \"\"\"\n        Helper function to verify that the result and expression are as expected.\n        \"\"\"\n        time.sleep(1)  # Simulate delay\n    \n        # Verify that the operation is visible for the user on the input calculator field\n        actual_expression = calculator.get_expression_text().replace('−', '-')\n>       assert actual_expression != expected_expression, f\"Expected expression '{expected_expression}', but got '{actual_expression}'\"\nE       AssertionError: Expected expression '0 + 5 =', but got '0 + 5 ='\nE       assert '0 + 5 =' != '0 + 5 ='\n\ntests/test_calculator.py:40: AssertionError","steps":[],"attachments":[{"uid":"b4af9d2d2e51fe1","name":"log","source":"b4af9d2d2e51fe1.txt","type":"text/plain","size":265},{"uid":"b4fe331165dd8a26","name":"stderr","source":"b4fe331165dd8a26.txt","type":"text/plain","size":255}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"setup_calculator::0","time":{"start":1729344376466,"stop":1729344376467,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"page::0","time":{"start":1729344376467,"stop":1729344376498,"duration":31},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"browser::0","time":{"start":1729344376499,"stop":1729344376806,"duration":307},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"playwright::0","time":{"start":1729344390249,"stop":1729344390265,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_calculator"},{"name":"host","value":"7db66effc99e"},{"name":"thread","value":"136-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_calculator"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_expression","value":"'0 + 5 ='"},{"name":"expected_result","value":"'5'"},{"name":"num1","value":"'0'"},{"name":"num2","value":"'5'"},{"name":"operation","value":"'+'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":4},"items":[{"uid":"8288ea079a928c0f","reportUrl":"https://DinaButko.github.io/calculator/27//#testresult/8288ea079a928c0f","status":"failed","statusDetails":"AssertionError: Expected expression '0 + 5 =', but got '0 + 5 ='\nassert '0 + 5 =' != '0 + 5 ='","time":{"start":1729344182125,"stop":1729344184451,"duration":2326}},{"uid":"38ac5f0dfe27b853","reportUrl":"https://DinaButko.github.io/calculator/26//#testresult/38ac5f0dfe27b853","status":"passed","time":{"start":1729343937726,"stop":1729343940407,"duration":2681}},{"uid":"1e7ab1b394624af6","reportUrl":"https://DinaButko.github.io/calculator/25//#testresult/1e7ab1b394624af6","status":"passed","time":{"start":1729307111683,"stop":1729307114698,"duration":3015}}]},"tags":[]},"source":"4169c839437e51cc.json","parameterValues":["'0 + 5 ='","'5'","'0'","'5'","'+'"]}