{"uid":"254f850507d1328c","name":"test_calculator_large_number_operations[5000000000-\\xd7-2000000000-1e+19-5000000000 \\xd7 2000000000 =]","fullName":"tests.test_calculator#test_calculator_large_number_operations","historyId":"327261273cf93ed78cb0e88502596ed8","time":{"start":1729344650050,"stop":1729344654920,"duration":4870},"description":"Parametrized test for calculator operations involving large numbers","descriptionHtml":"<p>Parametrized test for calculator operations involving large numbers</p>\n","status":"failed","statusMessage":"AssertionError: Expected expression '5000000000 × 2000000000 =', but got '5000000000 × 2000000000 ='\nassert '5000000000 × 2000000000 =' != '5000000000 × 2000000000 ='","statusTrace":"setup_calculator = <pages.calculator_page.CalculatorPage object at 0x7f52aa860100>\nnum1 = '5000000000', operation = '×', num2 = '2000000000'\nexpected_result = '1e+19', expected_expression = '5000000000 × 2000000000 ='\n\n    @pytest.mark.parametrize(\"num1, operation, num2, expected_result, expected_expression\", [\n        # Large numbers cases\n        ('1000000000', '+', '2000000000', '3000000000', '1000000000 + 2000000000 ='),\n        ('999999999999', '-', '1', '999999999998', '999999999999 - 1 ='),\n        ('5000000000', '×', '2000000000', '1e+19', '5000000000 × 2000000000 ='),\n        ('1000000000000', '÷', '1000000', '1000000', '1000000000000 ÷ 1000000 ='),\n    ])\n    def test_calculator_large_number_operations(setup_calculator, num1, operation, num2, expected_result,\n                                                expected_expression):\n        \"\"\"Parametrized test for calculator operations involving large numbers\"\"\"\n        log.info(f\" 'test_calculator_large_number_operations' for {num1} {operation} {num2} has started\")\n    \n        calculator = setup_calculator\n        perform_operation(calculator, num1, operation, num2)\n>       assert_results(calculator, expected_result, expected_expression)\n\ntests/test_calculator.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncalculator = <pages.calculator_page.CalculatorPage object at 0x7f52aa860100>\nexpected_result = '1e+19', expected_expression = '5000000000 × 2000000000 ='\n\n    def assert_results(calculator, expected_result, expected_expression):\n        \"\"\"\n        Helper function to verify that the result and expression are as expected.\n        \"\"\"\n        time.sleep(1)  # Simulate delay\n    \n        # Verify that the operation is visible for the user on the input calculator field\n        actual_expression = calculator.get_expression_text().replace('−', '-')\n>       assert actual_expression != expected_expression, f\"Expected expression '{expected_expression}', but got '{actual_expression}'\"\nE       AssertionError: Expected expression '5000000000 × 2000000000 =', but got '5000000000 × 2000000000 ='\nE       assert '5000000000 × 2000000000 =' != '5000000000 × 2000000000 ='\n\ntests/test_calculator.py:40: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1729344627899,"stop":1729344627900,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1729344627899,"stop":1729344627899,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1729344627900,"stop":1729344627900,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1729344627900,"stop":1729344627900,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"playwright","time":{"start":1729344627900,"stop":1729344628309,"duration":409},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"browser","time":{"start":1729344648365,"stop":1729344648597,"duration":232},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"page","time":{"start":1729344648597,"stop":1729344648722,"duration":125},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_calculator_url","time":{"start":1729344648722,"stop":1729344648722,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_calculator","time":{"start":1729344648722,"stop":1729344650048,"duration":1326},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"Parametrized test for calculator operations involving large numbers","status":"failed","statusMessage":"AssertionError: Expected expression '5000000000 × 2000000000 =', but got '5000000000 × 2000000000 ='\nassert '5000000000 × 2000000000 =' != '5000000000 × 2000000000 ='","statusTrace":"setup_calculator = <pages.calculator_page.CalculatorPage object at 0x7f52aa860100>\nnum1 = '5000000000', operation = '×', num2 = '2000000000'\nexpected_result = '1e+19', expected_expression = '5000000000 × 2000000000 ='\n\n    @pytest.mark.parametrize(\"num1, operation, num2, expected_result, expected_expression\", [\n        # Large numbers cases\n        ('1000000000', '+', '2000000000', '3000000000', '1000000000 + 2000000000 ='),\n        ('999999999999', '-', '1', '999999999998', '999999999999 - 1 ='),\n        ('5000000000', '×', '2000000000', '1e+19', '5000000000 × 2000000000 ='),\n        ('1000000000000', '÷', '1000000', '1000000', '1000000000000 ÷ 1000000 ='),\n    ])\n    def test_calculator_large_number_operations(setup_calculator, num1, operation, num2, expected_result,\n                                                expected_expression):\n        \"\"\"Parametrized test for calculator operations involving large numbers\"\"\"\n        log.info(f\" 'test_calculator_large_number_operations' for {num1} {operation} {num2} has started\")\n    \n        calculator = setup_calculator\n        perform_operation(calculator, num1, operation, num2)\n>       assert_results(calculator, expected_result, expected_expression)\n\ntests/test_calculator.py:145: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncalculator = <pages.calculator_page.CalculatorPage object at 0x7f52aa860100>\nexpected_result = '1e+19', expected_expression = '5000000000 × 2000000000 ='\n\n    def assert_results(calculator, expected_result, expected_expression):\n        \"\"\"\n        Helper function to verify that the result and expression are as expected.\n        \"\"\"\n        time.sleep(1)  # Simulate delay\n    \n        # Verify that the operation is visible for the user on the input calculator field\n        actual_expression = calculator.get_expression_text().replace('−', '-')\n>       assert actual_expression != expected_expression, f\"Expected expression '{expected_expression}', but got '{actual_expression}'\"\nE       AssertionError: Expected expression '5000000000 × 2000000000 =', but got '5000000000 × 2000000000 ='\nE       assert '5000000000 × 2000000000 =' != '5000000000 × 2000000000 ='\n\ntests/test_calculator.py:40: AssertionError","steps":[],"attachments":[{"uid":"6c3d369013440c86","name":"log","source":"6c3d369013440c86.txt","type":"text/plain","size":287},{"uid":"cb0bbb0ffcded330","name":"stderr","source":"cb0bbb0ffcded330.txt","type":"text/plain","size":277}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"setup_calculator::0","time":{"start":1729344654964,"stop":1729344654965,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"page::0","time":{"start":1729344654965,"stop":1729344654980,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"browser::0","time":{"start":1729344654980,"stop":1729344655359,"duration":379},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"playwright::0","time":{"start":1729344671962,"stop":1729344671974,"duration":12},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_calculator"},{"name":"host","value":"2f096a177c2e"},{"name":"thread","value":"133-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_calculator"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_expression","value":"'5000000000 × 2000000000 ='"},{"name":"expected_result","value":"'1e+19'"},{"name":"num1","value":"'5000000000'"},{"name":"num2","value":"'2000000000'"},{"name":"operation","value":"'×'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":5},"items":[{"uid":"a9815db4ae55e932","reportUrl":"https://DinaButko.github.io/calculator/28//#testresult/a9815db4ae55e932","status":"failed","statusDetails":"AssertionError: Expected expression '5000000000 × 2000000000 =', but got '5000000000 × 2000000000 ='\nassert '5000000000 × 2000000000 =' != '5000000000 × 2000000000 ='","time":{"start":1729344370399,"stop":1729344376847,"duration":6448}},{"uid":"711abd4e0d0172eb","reportUrl":"https://DinaButko.github.io/calculator/27//#testresult/711abd4e0d0172eb","status":"failed","statusDetails":"AssertionError: Expected expression '5000000000 × 2000000000 =', but got '5000000000 × 2000000000 ='\nassert '5000000000 × 2000000000 =' != '5000000000 × 2000000000 ='","time":{"start":1729344180731,"stop":1729344185561,"duration":4830}},{"uid":"b6c44a0a758d40bd","reportUrl":"https://DinaButko.github.io/calculator/26//#testresult/b6c44a0a758d40bd","status":"passed","time":{"start":1729343932610,"stop":1729343938966,"duration":6356}},{"uid":"15d5b1364696e5d3","reportUrl":"https://DinaButko.github.io/calculator/25//#testresult/15d5b1364696e5d3","status":"passed","time":{"start":1729307110565,"stop":1729307116785,"duration":6220}}]},"tags":[]},"source":"254f850507d1328c.json","parameterValues":["'5000000000 × 2000000000 ='","'1e+19'","'5000000000'","'2000000000'","'×'"]}